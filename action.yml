name: "Kubernetes Deployment Tester"
description: "Deploy an application to Kind and make a simple HTTP test to test the deployment."
author: "Alexandru Arvinte"
branding:
  icon: "box"
  color: "green"
inputs:
  image_name:
    description: "The full name of the image (registry/image_name:tag)"
    required: true
  registry_url:
    description: "The URL of the registry"
    required: true
    default: "ghcr.io"
  registry_username:
    description: "The username for the registry"
    required: true
  registry_token:
    description: "Token or password used to connect to the specified container registry, for ghcr.io you can use the default token: secrets.GITHUB_TOKEN"
    required: true
  port:
    description: "The port of the application"
    required: false
    default: "80"
  path:
    description: "The path to test, also used for readiness and liveness probes"
    required: false
    default: "/"
  initialDelaySeconds:
    description: "Number of seconds after the container has started before liveness or readiness probes are initiated."
    required: false
    default: "5"
  periodSeconds:
    description: "How often (in seconds) to perform the probe. Minimum value is 1."
    required: false
    default: "10"

runs:
  using: "composite"
  steps:
    - run: |
        echo "
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: test
        " > sa.yaml
      shell: bash

    - run: |
        echo "
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: test
        subjects:
        - kind: ServiceAccount
          name: test
          namespace: default
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io
        " > crb.yaml
      shell: bash

    - run: |
        echo "
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: application
          labels:
            app: application
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: application
          template:
            metadata:
              labels:
                app: application
            spec:
              containers:
              - name: application
                image: ${{ inputs.image_name }}
                ports:
                - containerPort: ${{ inputs.port }}
                readinessProbe:
                  httpGet:
                    path: ${{ inputs.path }}
                    port: ${{ inputs.port }}
                  initialDelaySeconds: ${{ inputs.initialDelaySeconds }}
                  periodSeconds: ${{ inputs.periodSeconds }}
                livenessProbe:
                  httpGet:
                    path: ${{ inputs.path }}
                    port: ${{ inputs.port }}
                  initialDelaySeconds: ${{ inputs.initialDelaySeconds }}
                  periodSeconds: ${{ inputs.periodSeconds }}
              imagePullSecrets:
              - name: registry-secret
        " > deployment.yaml
      shell: bash

    - name: Setup Kind
      uses: helm/kind-action@v1.2.0

    - run: |
        kubectl cluster-info
        kubectl get nodes
      shell: bash

    - run: |
        kubectl create secret docker-registry registry-secret \
          --docker-server=${{ inputs.registry_url }} \
          --docker-username=${{ inputs.registry_username }} \
          --docker-password=${{ inputs.registry_token }}
      shell: bash

    - run: |
        kubectl apply -f sa.yaml
        kubectl apply -f crb.yaml
        kubectl apply -f deployment.yaml
        echo "Sleeping for ${{ inputs.initialDelaySeconds }}s to allow the pod to fully start."
        sleep ${{ inputs.initialDelaySeconds }}
        kubectl get po
        POD_NAME=$(kubectl get pod -l app=application -o jsonpath="{.items[0].metadata.name}")
        kubectl port-forward $POD_NAME 8000:${{ inputs.port }} &>/dev/null &
        sleep 5
      shell: bash

    - run: |
        curl -i http://localhost:8000${{ inputs.path }}
      shell: bash
